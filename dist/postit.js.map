{"version":3,"sources":["postit.js","node_modules/browserify/node_modules/browser-pack/_prelude.js","lib/factory.js","lib/helpers.js","lib/manager.js","lib/postit.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","PostIt","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"instances","Factory","create","id","instance","destroy","get","getAll","./postit",2,"helpers","serialize","params","_params","param","push","join","shallowMerge","destination","source","prop","openWindow","options","that","nativeScreen","screen","nativeWindow","nativeDocument","document","nativeDocumentElement","documentElement","dualScreenLeft","screenLeft","left","dualScreenTop","screenTop","top","width","innerWidth","clientWidth","height","innerHeight","clientHeight","features","newWindow","open","url","title","focus",3,"Manager","add","console","warn","remove","record","event","listeners","off","removeAll","records","size","on","listener","emit","target","message","origin","./factory","./helpers",4,"token","prototype","wrapListener","evt","data","test","dataParsed","JSON","parse","err","error","__event","__id","__origin","indexOf","__token","addEventListener","removeEventListener","splice","eventOrigin","location","href","Object","toString","stringify","__value","postMessage"],"mappings":"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","file":"postit.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PostIt = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar PostIt = require('./postit');\nvar instances = {};\n\n/**\n * Factory Module.\n * @public\n */\n\nvar Factory = module.exports = {};\n\n/**\n * Creates a `PostIt` factory (Singleton).\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nFactory.create = function (id) {\n\tvar instance = instances[id];\n\n\t// If a given `instance` is found, use it and RETURN EARLY.\n\tif (instance) {\n\t\treturn instance;\n\t}\n\n\t// Otherwise, create a new `instance` and store it.\n\treturn (instances[id] = new PostIt(id));\n};\n\n/**\n * Destroys an explicit `PostIt`, factory instance.\n * @param {string} id\n * @returns {void}\n * @public\n */\n\nFactory.destroy = function (id) {\n\tdelete instances[id];\n};\n\n/**\n * Gets an explicit `PostIt`, factory instance.\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nFactory.get = function (id) {\n\treturn instances[id];\n};\n\n/**\n * Gets all `PostIt`, factory instances.\n * @returns {object}\n * @public\n */\n\nFactory.getAll = function () {\n\treturn instances;\n};\n\n},{\"./postit\":4}],2:[function(require,module,exports){\n'use strict';\n\n/**\n * Helpers Module.\n * @public\n */\n\nvar helpers = module.exports = {};\n\n/**\n * Serialize an object into a formatted string.\n * @param {object} params\n * @returns {string}\n * @public\n */\n\nhelpers.serialize = function (params) {\n\tvar _params = [];\n\n\tfor (var param in params) {\n\t\t_params.push(param + '=' + params[param]);\n\t}\n\n\treturn _params.join(', ');\n};\n\n/**\n * Merges a shallow `source` object into the `destination` object.\n * @param {object} destination\n * @param {object} source\n * @returns {object}\n * @public\n */\n\nhelpers.shallowMerge = function (destination, source) {\n\tfor (var prop in source) {\n\t\tif (null != source[prop]) {\n\t\t\tdestination[prop] = source[prop];\n\t\t}\n\t}\n\n\treturn destination;\n};\n\n/**\n * Loads a resource into a new browsing context (`window`).\n * @param {object} options\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/open|Window.open()} for more options.\n * @param {string} options.url\n * @param {string} options.title\n * @param {number} options.width\n * @param {number} options.height\n * @returns {object}\n * @public\n */\n\n/* istanbul ignore next */\nhelpers.openWindow = function (options) {\n\tvar that = this;\n\tvar nativeScreen = screen || {};\n\tvar nativeWindow = window;\n\tvar nativeDocument = document;\n\tvar nativeDocumentElement = nativeDocument.documentElement || {};\n\tvar dualScreenLeft = nativeWindow.screenLeft || nativeScreen.left || 0;\n\tvar dualScreenTop = nativeWindow.screenTop || nativeScreen.top || 0;\n\tvar width = nativeWindow.innerWidth || nativeDocumentElement.clientWidth || nativeScreen.width || 0;\n\tvar height = nativeWindow.innerHeight || nativeDocumentElement.clientHeight || nativeScreen.height || 0;\n\tvar left = ((width / 2) - (options.width / 2)) + dualScreenLeft;\n\tvar top = ((height / 2) - (options.height / 2)) + dualScreenTop;\n\tvar features = that.serialize(that.shallowMerge({\n\t\ttop: top,\n\t\tleft: left\n\t}, options));\n\tvar newWindow = nativeWindow.open(options.url, options.title, features);\n\n\tif (nativeWindow.focus) {\n\t\tnewWindow.focus();\n\t}\n\n\treturn newWindow;\n};\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nvar Factory = require('./factory');\nvar helpers = require('./helpers');\n\n/**\n * Manager Module.\n * @public\n */\n\nvar Manager = module.exports = {};\n\n/**\n * Creates and manages a new `PostIt` instance.\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nManager.add = function (id) {\n\tvar that = this;\n\n\tif ('string' !== typeof id) {\n\t\tconsole.warn(id + ' should be a `String`.');\n\n\t\treturn that;\n\t}\n\n\t// Create a memoized factory.\n\tFactory.create(id);\n\n\treturn that;\n};\n\n/**\n * Removes an explicit `PostIt` instance.\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nManager.remove = function (id) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\t// Remove listeners to avoid memory leaks.\n\tfor (var event in record.listeners) {\n\t\trecord.off(event);\n\t}\n\n\tFactory.destroy(id);\n\n\treturn that;\n};\n\n/**\n * Removes all `PostIt` instances.\n * @return {object}\n * @public\n */\n\nManager.removeAll = function () {\n\tvar that = this;\n\tvar records = that.getAll();\n\n\tfor (var record in records) {\n\t\tthat.remove(record);\n\t}\n\n\treturn that;\n};\n\n/**\n * Returns the length of all `PostIt` instances.\n * @return {number}\n * @public\n */\n\nManager.size = function () {\n\tvar size = 0;\n\tvar records = this.getAll();\n\n\tfor (var record in records) {\n\t\tsize++;\n\t}\n\n\treturn size;\n};\n\n/**\n * Gets an explicit `PostIt` instance.\n * @param {string} id\n * @returns {object|void}\n */\n\nManager.get = function (id) {\n\treturn Factory.get(id) || console.warn(id + ' does not match any `PostIt` instances.');\n};\n\n/**\n * Gets all `PostIt` instances.\n * @returns {object}\n */\n\nManager.getAll = function () {\n\treturn Factory.getAll();\n};\n\n/**\n * @see {@link postit.md#PostIt+on} for further information (signature, etc.).\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nManager.on = function (id, event, listener) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\trecord.on(event, listener);\n\n\treturn that;\n};\n\n/**\n * @see {@link postit.md#PostIt+off} for further information (signature, etc.).\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nManager.off = function (id, event, listener) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\trecord.off(event, listener);\n\n\treturn that;\n};\n\n/**\n * @see {@link postit.md#PostIt+emit} for further information (signature, etc.).\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nManager.emit = function (id, event, target, message, origin) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\trecord.emit(event, target, message, origin);\n\n\treturn that;\n};\n\n/**\n * @see {@link helpers.md#helpers.openWindow} for further information (signature, etc.).\n * @public\n */\n\nManager.openWindow = function (options) {\n\treturn helpers.openWindow(options || {});\n};\n\n},{\"./factory\":1,\"./helpers\":2}],4:[function(require,module,exports){\n'use strict';\n\n/**\n * PostIt Module.\n * @constructor\n * @param {string} id\n * @public\n */\n\nvar PostIt = module.exports = function (id) {\n\tthis.id = id;\n\tthis.token = 0;\n\tthis.listeners = {};\n};\n\n/**\n * Registers `.postMessage` event listeners.\n * @param {string} event\n * @param {function} listener\n * @returns {object}\n * @public\n */\n\nPostIt.prototype.on = function (event, listener) {\n\tvar that = this;\n\n\tthat.listeners[event] = that.listeners[event] || [];\n\n\tfunction wrapListener(evt) {\n\t\tvar data = null;\n\n\t\tif (/__event\\s?\"/.test(evt.data)) {\n\t\t\ttry {\n\t\t\t\tdata = evt.dataParsed = JSON.parse(evt.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t}\n\n\t\tif ('*' !== event &&\n\t\t\t(!data ||\n\t\t\tevent !== data.__event ||\n\t\t\tthat.id !== data.__id ||\n\t\t\t'null' !== evt.origin && -1 === data.__origin.indexOf(evt.origin))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tlistener.call(this, evt);\n\t}\n\n\tlistener.__token = wrapListener.__token = that.token++;\n\n\twindow.addEventListener('message', wrapListener, false);\n\tthat.listeners[event].push(wrapListener);\n\n\treturn that;\n};\n\n/**\n * Unregisters (all | explicit) `.postMessage` event listeners.\n * @param {string} event\n * @param {function=} listener\n * @returns {object}\n * @public\n */\n\nPostIt.prototype.off = function (event, listener) {\n\tvar that = this;\n\tvar listeners = that.listeners[event] || [];\n\n\tfor (var i = 0; i < listeners.length; ++i) {\n\t\tif (!listener || listener.__token === listeners[i].__token) {\n\t\t\twindow.removeEventListener('message', listeners[i], false);\n\t\t\tlisteners.splice(i, 1);\n\n\t\t\t--i;\n\t\t}\n\t}\n\n\treturn that;\n};\n\n/**\n * Emits explicit `message` events, using the client's `.postMessage` emitter.\n * @param {string} event\n * @param {object} target\n * @param {string|array|object} message\n * @param {string} origin\n * @returns {object}\n * @public\n */\n\nPostIt.prototype.emit = function (event, target, message, origin) {\n\tvar that = this;\n\tvar eventOrigin = window.location.href;\n\n\tswitch (Object.prototype.toString.call(message)) {\n\t\tcase '[object Function]':\n\t\t\tconsole.warn(message + ' should either be an `Object`, `Array` or `String`.');\n\n\t\t\treturn that;\n\n\t\tcase '[object Object]':\n\t\t\tmessage.__id = that.id;\n\t\t\tmessage.__event = event;\n\t\t\tmessage.__origin = eventOrigin;\n\t\t\tmessage = JSON.stringify(message);\n\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmessage = JSON.stringify({\n\t\t\t\t__value: message,\n\t\t\t\t__id: that.id,\n\t\t\t\t__event: event,\n\t\t\t\t__origin: eventOrigin\n\t\t\t});\n\t}\n\n\ttarget.postMessage(message, origin);\n\n\treturn that;\n};\n\n},{}]},{},[3])(3)\n});\n\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar PostIt = require('./postit');\nvar instances = {};\n\n/**\n * Factory Module.\n * @public\n */\n\nvar Factory = module.exports = {};\n\n/**\n * Creates a `PostIt` factory (Singleton).\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nFactory.create = function (id) {\n\tvar instance = instances[id];\n\n\t// If a given `instance` is found, use it and RETURN EARLY.\n\tif (instance) {\n\t\treturn instance;\n\t}\n\n\t// Otherwise, create a new `instance` and store it.\n\treturn (instances[id] = new PostIt(id));\n};\n\n/**\n * Destroys an explicit `PostIt`, factory instance.\n * @param {string} id\n * @returns {void}\n * @public\n */\n\nFactory.destroy = function (id) {\n\tdelete instances[id];\n};\n\n/**\n * Gets an explicit `PostIt`, factory instance.\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nFactory.get = function (id) {\n\treturn instances[id];\n};\n\n/**\n * Gets all `PostIt`, factory instances.\n * @returns {object}\n * @public\n */\n\nFactory.getAll = function () {\n\treturn instances;\n};\n","'use strict';\n\n/**\n * Helpers Module.\n * @public\n */\n\nvar helpers = module.exports = {};\n\n/**\n * Serialize an object into a formatted string.\n * @param {object} params\n * @returns {string}\n * @public\n */\n\nhelpers.serialize = function (params) {\n\tvar _params = [];\n\n\tfor (var param in params) {\n\t\t_params.push(param + '=' + params[param]);\n\t}\n\n\treturn _params.join(', ');\n};\n\n/**\n * Merges a shallow `source` object into the `destination` object.\n * @param {object} destination\n * @param {object} source\n * @returns {object}\n * @public\n */\n\nhelpers.shallowMerge = function (destination, source) {\n\tfor (var prop in source) {\n\t\tif (null != source[prop]) {\n\t\t\tdestination[prop] = source[prop];\n\t\t}\n\t}\n\n\treturn destination;\n};\n\n/**\n * Loads a resource into a new browsing context (`window`).\n * @param {object} options\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/open|Window.open()} for more options.\n * @param {string} options.url\n * @param {string} options.title\n * @param {number} options.width\n * @param {number} options.height\n * @returns {object}\n * @public\n */\n\n/* istanbul ignore next */\nhelpers.openWindow = function (options) {\n\tvar that = this;\n\tvar nativeScreen = screen || {};\n\tvar nativeWindow = window;\n\tvar nativeDocument = document;\n\tvar nativeDocumentElement = nativeDocument.documentElement || {};\n\tvar dualScreenLeft = nativeWindow.screenLeft || nativeScreen.left || 0;\n\tvar dualScreenTop = nativeWindow.screenTop || nativeScreen.top || 0;\n\tvar width = nativeWindow.innerWidth || nativeDocumentElement.clientWidth || nativeScreen.width || 0;\n\tvar height = nativeWindow.innerHeight || nativeDocumentElement.clientHeight || nativeScreen.height || 0;\n\tvar left = ((width / 2) - (options.width / 2)) + dualScreenLeft;\n\tvar top = ((height / 2) - (options.height / 2)) + dualScreenTop;\n\tvar features = that.serialize(that.shallowMerge({\n\t\ttop: top,\n\t\tleft: left\n\t}, options));\n\tvar newWindow = nativeWindow.open(options.url, options.title, features);\n\n\tif (nativeWindow.focus) {\n\t\tnewWindow.focus();\n\t}\n\n\treturn newWindow;\n};\n","'use strict';\n\nvar Factory = require('./factory');\nvar helpers = require('./helpers');\n\n/**\n * Manager Module.\n * @public\n */\n\nvar Manager = module.exports = {};\n\n/**\n * Creates and manages a new `PostIt` instance.\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nManager.add = function (id) {\n\tvar that = this;\n\n\tif ('string' !== typeof id) {\n\t\tconsole.warn(id + ' should be a `String`.');\n\n\t\treturn that;\n\t}\n\n\t// Create a memoized factory.\n\tFactory.create(id);\n\n\treturn that;\n};\n\n/**\n * Removes an explicit `PostIt` instance.\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nManager.remove = function (id) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\t// Remove listeners to avoid memory leaks.\n\tfor (var event in record.listeners) {\n\t\trecord.off(event);\n\t}\n\n\tFactory.destroy(id);\n\n\treturn that;\n};\n\n/**\n * Removes all `PostIt` instances.\n * @return {object}\n * @public\n */\n\nManager.removeAll = function () {\n\tvar that = this;\n\tvar records = that.getAll();\n\n\tfor (var record in records) {\n\t\tthat.remove(record);\n\t}\n\n\treturn that;\n};\n\n/**\n * Returns the length of all `PostIt` instances.\n * @return {number}\n * @public\n */\n\nManager.size = function () {\n\tvar size = 0;\n\tvar records = this.getAll();\n\n\tfor (var record in records) {\n\t\tsize++;\n\t}\n\n\treturn size;\n};\n\n/**\n * Gets an explicit `PostIt` instance.\n * @param {string} id\n * @returns {object|void}\n */\n\nManager.get = function (id) {\n\treturn Factory.get(id) || console.warn(id + ' does not match any `PostIt` instances.');\n};\n\n/**\n * Gets all `PostIt` instances.\n * @returns {object}\n */\n\nManager.getAll = function () {\n\treturn Factory.getAll();\n};\n\n/**\n * @see {@link postit.md#PostIt+on} for further information (signature, etc.).\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nManager.on = function (id, event, listener) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\trecord.on(event, listener);\n\n\treturn that;\n};\n\n/**\n * @see {@link postit.md#PostIt+off} for further information (signature, etc.).\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nManager.off = function (id, event, listener) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\trecord.off(event, listener);\n\n\treturn that;\n};\n\n/**\n * @see {@link postit.md#PostIt+emit} for further information (signature, etc.).\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nManager.emit = function (id, event, target, message, origin) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\trecord.emit(event, target, message, origin);\n\n\treturn that;\n};\n\n/**\n * @see {@link helpers.md#helpers.openWindow} for further information (signature, etc.).\n * @public\n */\n\nManager.openWindow = function (options) {\n\treturn helpers.openWindow(options || {});\n};\n","'use strict';\n\n/**\n * PostIt Module.\n * @constructor\n * @param {string} id\n * @public\n */\n\nvar PostIt = module.exports = function (id) {\n\tthis.id = id;\n\tthis.token = 0;\n\tthis.listeners = {};\n};\n\n/**\n * Registers `.postMessage` event listeners.\n * @param {string} event\n * @param {function} listener\n * @returns {object}\n * @public\n */\n\nPostIt.prototype.on = function (event, listener) {\n\tvar that = this;\n\n\tthat.listeners[event] = that.listeners[event] || [];\n\n\tfunction wrapListener(evt) {\n\t\tvar data = null;\n\n\t\tif (/__event\\s?\"/.test(evt.data)) {\n\t\t\ttry {\n\t\t\t\tdata = evt.dataParsed = JSON.parse(evt.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t}\n\n\t\tif ('*' !== event &&\n\t\t\t(!data ||\n\t\t\tevent !== data.__event ||\n\t\t\tthat.id !== data.__id ||\n\t\t\t'null' !== evt.origin && -1 === data.__origin.indexOf(evt.origin))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tlistener.call(this, evt);\n\t}\n\n\tlistener.__token = wrapListener.__token = that.token++;\n\n\twindow.addEventListener('message', wrapListener, false);\n\tthat.listeners[event].push(wrapListener);\n\n\treturn that;\n};\n\n/**\n * Unregisters (all | explicit) `.postMessage` event listeners.\n * @param {string} event\n * @param {function=} listener\n * @returns {object}\n * @public\n */\n\nPostIt.prototype.off = function (event, listener) {\n\tvar that = this;\n\tvar listeners = that.listeners[event] || [];\n\n\tfor (var i = 0; i < listeners.length; ++i) {\n\t\tif (!listener || listener.__token === listeners[i].__token) {\n\t\t\twindow.removeEventListener('message', listeners[i], false);\n\t\t\tlisteners.splice(i, 1);\n\n\t\t\t--i;\n\t\t}\n\t}\n\n\treturn that;\n};\n\n/**\n * Emits explicit `message` events, using the client's `.postMessage` emitter.\n * @param {string} event\n * @param {object} target\n * @param {string|array|object} message\n * @param {string} origin\n * @returns {object}\n * @public\n */\n\nPostIt.prototype.emit = function (event, target, message, origin) {\n\tvar that = this;\n\tvar eventOrigin = window.location.href;\n\n\tswitch (Object.prototype.toString.call(message)) {\n\t\tcase '[object Function]':\n\t\t\tconsole.warn(message + ' should either be an `Object`, `Array` or `String`.');\n\n\t\t\treturn that;\n\n\t\tcase '[object Object]':\n\t\t\tmessage.__id = that.id;\n\t\t\tmessage.__event = event;\n\t\t\tmessage.__origin = eventOrigin;\n\t\t\tmessage = JSON.stringify(message);\n\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmessage = JSON.stringify({\n\t\t\t\t__value: message,\n\t\t\t\t__id: that.id,\n\t\t\t\t__event: event,\n\t\t\t\t__origin: eventOrigin\n\t\t\t});\n\t}\n\n\ttarget.postMessage(message, origin);\n\n\treturn that;\n};\n"],"sourceRoot":"/source/"}