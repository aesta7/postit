{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","lib/factory.js","postit.js","lib/helpers.js","lib/manager.js","lib/postit.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","PostIt","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","instances","Factory","add","id","instance","remove","get","getAll","./postit","2","helpers","serialize","params","_params","param","push","join","shallowMerge","destination","source","prop","openWindow","url","name","options","that","nativeScreen","screen","nativeWindow","nativeDocument","document","nativeDocumentElement","documentElement","dualScreenLeft","screenLeft","left","dualScreenTop","screenTop","top","width","innerWidth","clientWidth","height","innerHeight","clientHeight","features","newWindow","open","focus","3","Manager","console","warn","record","event","listeners","off","removeAll","records","size","on","listener","emit","target","message","origin","./factory","./helpers","4","nextGuid","prototype","dispatcher","evt","data","test","dataParsed","JSON","parse","err","error","__id","__event","__origin","indexOf","guid","addEventListener","splice","removeEventListener","eventOrigin","location","href","symbol","Object","toString","__postit","stringify","__value","postMessage"],"mappings":"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","file":"postit.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar PostIt = require('./postit');\nvar instances = {};\n\n/**\n * Factory Module.\n * @public\n */\n\nvar Factory = module.exports = {};\n\n/**\n * Creates a `PostIt` factory (Singleton).\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nFactory.add = function(id) {\n\tvar instance = instances[id];\n\n\t// If a given `instance` is found, use it and RETURN EARLY.\n\tif (instance) {\n\t\treturn instance;\n\t}\n\n\t// Otherwise, create a new `instance` and store it.\n\treturn (instances[id] = new PostIt(id));\n};\n\n/**\n * Removes an explicit `PostIt`, factory instance.\n * @param {string} id\n * @returns {void}\n * @public\n */\n\nFactory.remove = function(id) {\n\tdelete instances[id];\n};\n\n/**\n * Gets an explicit `PostIt`, factory instance.\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nFactory.get = function(id) {\n\treturn instances[id];\n};\n\n/**\n * Gets all `PostIt`, factory instances.\n * @returns {object}\n * @public\n */\n\nFactory.getAll = function() {\n\treturn instances;\n};\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PostIt = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar PostIt = require('./postit');\nvar instances = {};\n\n/**\n * Factory Module.\n * @public\n */\n\nvar Factory = module.exports = {};\n\n/**\n * Creates a `PostIt` factory (Singleton).\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nFactory.add = function(id) {\n\tvar instance = instances[id];\n\n\t// If a given `instance` is found, use it and RETURN EARLY.\n\tif (instance) {\n\t\treturn instance;\n\t}\n\n\t// Otherwise, create a new `instance` and store it.\n\treturn (instances[id] = new PostIt(id));\n};\n\n/**\n * Removes an explicit `PostIt`, factory instance.\n * @param {string} id\n * @returns {void}\n * @public\n */\n\nFactory.remove = function(id) {\n\tdelete instances[id];\n};\n\n/**\n * Gets an explicit `PostIt`, factory instance.\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nFactory.get = function(id) {\n\treturn instances[id];\n};\n\n/**\n * Gets all `PostIt`, factory instances.\n * @returns {object}\n * @public\n */\n\nFactory.getAll = function() {\n\treturn instances;\n};\n\n},{\"./postit\":4}],2:[function(require,module,exports){\n'use strict';\n\n/**\n * Helpers Module.\n * @public\n */\n\nvar helpers = module.exports = {};\n\n/**\n * Serializes an object into a formatted string.\n * @param {object} params\n * @returns {string}\n * @public\n */\n\nhelpers.serialize = function(params) {\n\tvar _params = [];\n\n\tfor (var param in params) {\n\t\t_params.push(param + '=' + params[param]);\n\t}\n\n\treturn _params.join(', ');\n};\n\n/**\n * Merges a shallow `source` object into the `destination` object.\n * @param {object} destination\n * @param {object} source\n * @returns {object}\n * @public\n */\n\nhelpers.shallowMerge = function(destination, source) {\n\tfor (var prop in source) {\n\t\tif (null != source[prop]) {\n\t\t\tdestination[prop] = source[prop];\n\t\t}\n\t}\n\n\treturn destination;\n};\n\n/**\n * Loads a resource into a new browsing context (`window`).\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/open|Window.open()} for more options.\n * @param {string} url\n * @param {string} name\n * @param {object} options\n * @param {number} options.width\n * @param {number} options.height\n * @returns {object}\n * @public\n */\n\n/* istanbul ignore next */\nhelpers.openWindow = function(url, name, options) {\n\toptions = options || {};\n\n\tvar that = this;\n\tvar nativeScreen = screen || {};\n\tvar nativeWindow = window;\n\tvar nativeDocument = document;\n\tvar nativeDocumentElement = nativeDocument.documentElement || {};\n\tvar dualScreenLeft = nativeWindow.screenLeft || nativeScreen.left || 0;\n\tvar dualScreenTop = nativeWindow.screenTop || nativeScreen.top || 0;\n\tvar width = nativeWindow.innerWidth || nativeDocumentElement.clientWidth || nativeScreen.width || 0;\n\tvar height = nativeWindow.innerHeight || nativeDocumentElement.clientHeight || nativeScreen.height || 0;\n\tvar left = ((width / 2) - (options.width / 2)) + dualScreenLeft;\n\tvar top = ((height / 2) - (options.height / 2)) + dualScreenTop;\n\tvar features = that.serialize(that.shallowMerge({\n\t\ttop: top,\n\t\tleft: left\n\t}, options));\n\tvar newWindow = nativeWindow.open(url, name, features);\n\n\tif (nativeWindow.focus) {\n\t\tnewWindow.focus();\n\t}\n\n\treturn newWindow;\n};\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nvar Factory = require('./factory');\nvar helpers = require('./helpers');\n\n/**\n * Manager Module.\n * @public\n */\n\nvar Manager = module.exports = {};\n\n/**\n * Creates and manages a `PostIt` instance (`id`).\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nManager.add = function(id) {\n\tvar that = this;\n\n\tif ('string' !== typeof id) {\n\t\tconsole.warn(id + ' should be a `String`.');\n\n\t\treturn that;\n\t}\n\n\t// Create a memoized factory.\n\tFactory.add(id);\n\n\treturn that;\n};\n\n/**\n * Removes a `PostIt` instance (`id`).\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nManager.remove = function(id) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\t// Remove listeners to avoid memory leaks.\n\tfor (var event in record.listeners) {\n\t\trecord.off(event);\n\t}\n\n\tFactory.remove(id);\n\n\treturn that;\n};\n\n/**\n * Removes all `PostIt` instances.\n * @return {object}\n * @public\n */\n\nManager.removeAll = function() {\n\tvar that = this;\n\tvar records = that.getAll();\n\n\tfor (var record in records) {\n\t\tthat.remove(record);\n\t}\n\n\treturn that;\n};\n\n/**\n * Returns the length of all `PostIt` instances.\n * @return {number}\n * @public\n */\n\nManager.size = function() {\n\tvar size = 0;\n\tvar records = this.getAll();\n\n\tfor (var record in records) {\n\t\tsize++;\n\t}\n\n\treturn size;\n};\n\n/**\n * Gets a `PostIt` instance (`id`).\n * @param {string} id\n * @returns {object|void}\n */\n\nManager.get = function(id) {\n\treturn Factory.get(id) || console.warn(id + ' does not match any `PostIt` instances.');\n};\n\n/**\n * Gets all `PostIt` instances.\n * @returns {object}\n */\n\nManager.getAll = function() {\n\treturn Factory.getAll();\n};\n\n/**\n * @see {@link postit.md#PostIt+on} for further information.\n * @param {string} id\n * @param {string} event\n * @param {function} listener\n * @returns {object}\n * @public\n */\n\nManager.on = function(id, event, listener) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\trecord.on(event, listener);\n\n\treturn that;\n};\n\n/**\n * @see {@link postit.md#PostIt+off} for further information.\n * @param {string} id\n * @param {string} event\n * @param {function=} listener\n * @returns {object}\n * @public\n */\n\nManager.off = function(id, event, listener) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\trecord.off(event, listener);\n\n\treturn that;\n};\n\n/**\n * @see {@link postit.md#PostIt+emit} for further information.\n * @param {string} id\n * @param {string} event\n * @param {object} target\n * @param {string|array|object} message\n * @param {string} origin\n * @returns {object}\n * @public\n */\n\nManager.emit = function(id, event, target, message, origin) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\trecord.emit(event, target, message, origin);\n\n\treturn that;\n};\n\n/**\n * @see {@link helpers.md#helpers.openWindow} for further information.\n * @param {string} url\n * @param {string} name\n * @param {object} options\n * @param {number} options.width\n * @param {number} options.height\n * @public\n */\n\nManager.openWindow = function(url, name, options) {\n\treturn helpers.openWindow(url, name, options);\n};\n\n},{\"./factory\":1,\"./helpers\":2}],4:[function(require,module,exports){\n'use strict';\n\n/**\n * PostIt Module.\n * @constructor\n * @param {string} id\n * @public\n */\n\nvar PostIt = module.exports = function(id) {\n\tthis.id = id;\n\tthis.nextGuid = 0;\n\tthis.listeners = {};\n};\n\n/**\n * Registers a `listener` to a `PostIt` instance (`id`), for a given `event`.\n * @param {string} event\n * @param {function} listener\n * @returns {object}\n * @public\n */\n\nPostIt.prototype.on = function(event, listener) {\n\tvar that = this;\n\n\tvar listeners = that.listeners[event] = that.listeners[event] || [];\n\tlistener.guid = that.nextGuid++;\n\tlisteners.dispatcher = dispatcher;\n\n\tlisteners.push(listener);\n\n\tfunction dispatcher(evt) {\n\t\tvar data = null;\n\n\t\tif (/__postit\\s?\"/.test(evt.data)) {\n\t\t\ttry {\n\t\t\t\tdata = evt.dataParsed = JSON.parse(evt.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t}\n\n\t\tif (!data || // The preferred symbol (`__postit`) is not present, or an 'Uncaught SyntaxError' occurs, whilst parsing `evt.data` => RETURN EARLY,\n\t\t\tthat.id !== data.__id || // or an instance identifier does not match => RETURN EARLY,\n\t\t\t(event !== data.__event && '*' !== event) || // or an event does not match, and an asterisk (*) is not the event => RETURN EARLY\n\t\t\t('null' !== evt.origin && -1 === data.__origin.indexOf(evt.origin)) // or `'null'` is not the `evt.origin`, and the origins do not match. => RETURN EARLY\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0; i < listeners.length; ++i) {\n\t\t\tlisteners[i].call(this, evt);\n\t\t}\n\t}\n\n\t// Only attach one dispatcher per `event`.\n\tif (listeners.length === 1) {\n\t\twindow.addEventListener('message', dispatcher, false);\n\t}\n\n\treturn that;\n};\n\n/**\n * - If a `listener` is not provided, then unregister all listeners from a `PostIt` instance (`id`), for a given `event`.\n * - If a `listener` is provided, then unregister a `listener` from a `PostIt` instance (`id`), for a given `event`.\n * @param {string} event\n * @param {function=} listener\n * @returns {object}\n * @public\n */\n\nPostIt.prototype.off = function(event, listener) {\n\tvar that = this;\n\tvar listeners = that.listeners[event] || [];\n\n\tfor (var i = 0; i < listeners.length; ++i) {\n\t\tif (!listener || listener.guid === listeners[i].guid) {\n\t\t\tlisteners.splice(i--, 1);\n\t\t}\n\t}\n\n\tif (!listeners.length) {\n\t\twindow.removeEventListener('message', listeners.dispatcher, false);\n\n\t\tdelete that.listeners[event];\n\t}\n\n\treturn that;\n};\n\n/**\n * - If `event` is an asterisk (\\*), then emit an `event` to all listeners registered to a `PostIt` instance (`id`), for all given `event`s.\n * - If `event` is not an asterisk (\\*), then emit an `event` to all listeners registered to a `PostIt` instance (`id`), for a given `event`.\n * @param {string} event\n * @param {object} target\n * @param {string|array|object} message\n * @param {string} origin\n * @returns {object}\n * @public\n */\n\nPostIt.prototype.emit = function(event, target, message, origin) {\n\tvar that = this;\n\tvar eventOrigin = window.location.href;\n\tvar symbol = 'postit';\n\n\tswitch (Object.prototype.toString.call(message)) {\n\t\tcase '[object Function]':\n\t\t\tconsole.warn(message + ' should either be an `Object`, `Array` or `String`.');\n\n\t\t\treturn that;\n\n\t\tcase '[object Object]':\n\t\t\tmessage.__postit = symbol;\n\t\t\tmessage.__id = that.id;\n\t\t\tmessage.__event = event;\n\t\t\tmessage.__origin = eventOrigin;\n\t\t\tmessage = JSON.stringify(message);\n\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmessage = JSON.stringify({\n\t\t\t\t__postit: symbol,\n\t\t\t\t__value: message,\n\t\t\t\t__id: that.id,\n\t\t\t\t__event: event,\n\t\t\t\t__origin: eventOrigin\n\t\t\t});\n\t}\n\n\ttarget.postMessage(message, origin);\n\n\treturn that;\n};\n\n},{}]},{},[3])(3)\n});\n\n","'use strict';\n\n/**\n * Helpers Module.\n * @public\n */\n\nvar helpers = module.exports = {};\n\n/**\n * Serializes an object into a formatted string.\n * @param {object} params\n * @returns {string}\n * @public\n */\n\nhelpers.serialize = function(params) {\n\tvar _params = [];\n\n\tfor (var param in params) {\n\t\t_params.push(param + '=' + params[param]);\n\t}\n\n\treturn _params.join(', ');\n};\n\n/**\n * Merges a shallow `source` object into the `destination` object.\n * @param {object} destination\n * @param {object} source\n * @returns {object}\n * @public\n */\n\nhelpers.shallowMerge = function(destination, source) {\n\tfor (var prop in source) {\n\t\tif (null != source[prop]) {\n\t\t\tdestination[prop] = source[prop];\n\t\t}\n\t}\n\n\treturn destination;\n};\n\n/**\n * Loads a resource into a new browsing context (`window`).\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/open|Window.open()} for more options.\n * @param {string} url\n * @param {string} name\n * @param {object} options\n * @param {number} options.width\n * @param {number} options.height\n * @returns {object}\n * @public\n */\n\n/* istanbul ignore next */\nhelpers.openWindow = function(url, name, options) {\n\toptions = options || {};\n\n\tvar that = this;\n\tvar nativeScreen = screen || {};\n\tvar nativeWindow = window;\n\tvar nativeDocument = document;\n\tvar nativeDocumentElement = nativeDocument.documentElement || {};\n\tvar dualScreenLeft = nativeWindow.screenLeft || nativeScreen.left || 0;\n\tvar dualScreenTop = nativeWindow.screenTop || nativeScreen.top || 0;\n\tvar width = nativeWindow.innerWidth || nativeDocumentElement.clientWidth || nativeScreen.width || 0;\n\tvar height = nativeWindow.innerHeight || nativeDocumentElement.clientHeight || nativeScreen.height || 0;\n\tvar left = ((width / 2) - (options.width / 2)) + dualScreenLeft;\n\tvar top = ((height / 2) - (options.height / 2)) + dualScreenTop;\n\tvar features = that.serialize(that.shallowMerge({\n\t\ttop: top,\n\t\tleft: left\n\t}, options));\n\tvar newWindow = nativeWindow.open(url, name, features);\n\n\tif (nativeWindow.focus) {\n\t\tnewWindow.focus();\n\t}\n\n\treturn newWindow;\n};\n","'use strict';\n\nvar Factory = require('./factory');\nvar helpers = require('./helpers');\n\n/**\n * Manager Module.\n * @public\n */\n\nvar Manager = module.exports = {};\n\n/**\n * Creates and manages a `PostIt` instance (`id`).\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nManager.add = function(id) {\n\tvar that = this;\n\n\tif ('string' !== typeof id) {\n\t\tconsole.warn(id + ' should be a `String`.');\n\n\t\treturn that;\n\t}\n\n\t// Create a memoized factory.\n\tFactory.add(id);\n\n\treturn that;\n};\n\n/**\n * Removes a `PostIt` instance (`id`).\n * @param {string} id\n * @returns {object}\n * @public\n */\n\nManager.remove = function(id) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\t// Remove listeners to avoid memory leaks.\n\tfor (var event in record.listeners) {\n\t\trecord.off(event);\n\t}\n\n\tFactory.remove(id);\n\n\treturn that;\n};\n\n/**\n * Removes all `PostIt` instances.\n * @return {object}\n * @public\n */\n\nManager.removeAll = function() {\n\tvar that = this;\n\tvar records = that.getAll();\n\n\tfor (var record in records) {\n\t\tthat.remove(record);\n\t}\n\n\treturn that;\n};\n\n/**\n * Returns the length of all `PostIt` instances.\n * @return {number}\n * @public\n */\n\nManager.size = function() {\n\tvar size = 0;\n\tvar records = this.getAll();\n\n\tfor (var record in records) {\n\t\tsize++;\n\t}\n\n\treturn size;\n};\n\n/**\n * Gets a `PostIt` instance (`id`).\n * @param {string} id\n * @returns {object|void}\n */\n\nManager.get = function(id) {\n\treturn Factory.get(id) || console.warn(id + ' does not match any `PostIt` instances.');\n};\n\n/**\n * Gets all `PostIt` instances.\n * @returns {object}\n */\n\nManager.getAll = function() {\n\treturn Factory.getAll();\n};\n\n/**\n * @see {@link postit.md#PostIt+on} for further information.\n * @param {string} id\n * @param {string} event\n * @param {function} listener\n * @returns {object}\n * @public\n */\n\nManager.on = function(id, event, listener) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\trecord.on(event, listener);\n\n\treturn that;\n};\n\n/**\n * @see {@link postit.md#PostIt+off} for further information.\n * @param {string} id\n * @param {string} event\n * @param {function=} listener\n * @returns {object}\n * @public\n */\n\nManager.off = function(id, event, listener) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\trecord.off(event, listener);\n\n\treturn that;\n};\n\n/**\n * @see {@link postit.md#PostIt+emit} for further information.\n * @param {string} id\n * @param {string} event\n * @param {object} target\n * @param {string|array|object} message\n * @param {string} origin\n * @returns {object}\n * @public\n */\n\nManager.emit = function(id, event, target, message, origin) {\n\tvar that = this;\n\tvar record = that.get(id);\n\n\tif (!record) {\n\t\treturn that;\n\t}\n\n\trecord.emit(event, target, message, origin);\n\n\treturn that;\n};\n\n/**\n * @see {@link helpers.md#helpers.openWindow} for further information.\n * @param {string} url\n * @param {string} name\n * @param {object} options\n * @param {number} options.width\n * @param {number} options.height\n * @public\n */\n\nManager.openWindow = function(url, name, options) {\n\treturn helpers.openWindow(url, name, options);\n};\n","'use strict';\n\n/**\n * PostIt Module.\n * @constructor\n * @param {string} id\n * @public\n */\n\nvar PostIt = module.exports = function(id) {\n\tthis.id = id;\n\tthis.nextGuid = 0;\n\tthis.listeners = {};\n};\n\n/**\n * Registers a `listener` to a `PostIt` instance (`id`), for a given `event`.\n * @param {string} event\n * @param {function} listener\n * @returns {object}\n * @public\n */\n\nPostIt.prototype.on = function(event, listener) {\n\tvar that = this;\n\n\tvar listeners = that.listeners[event] = that.listeners[event] || [];\n\tlistener.guid = that.nextGuid++;\n\tlisteners.dispatcher = dispatcher;\n\n\tlisteners.push(listener);\n\n\tfunction dispatcher(evt) {\n\t\tvar data = null;\n\n\t\tif (/__postit\\s?\"/.test(evt.data)) {\n\t\t\ttry {\n\t\t\t\tdata = evt.dataParsed = JSON.parse(evt.data);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t}\n\n\t\tif (!data || // The preferred symbol (`__postit`) is not present, or an 'Uncaught SyntaxError' occurs, whilst parsing `evt.data` => RETURN EARLY,\n\t\t\tthat.id !== data.__id || // or an instance identifier does not match => RETURN EARLY,\n\t\t\t(event !== data.__event && '*' !== event) || // or an event does not match, and an asterisk (*) is not the event => RETURN EARLY\n\t\t\t('null' !== evt.origin && -1 === data.__origin.indexOf(evt.origin)) // or `'null'` is not the `evt.origin`, and the origins do not match. => RETURN EARLY\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0; i < listeners.length; ++i) {\n\t\t\tlisteners[i].call(this, evt);\n\t\t}\n\t}\n\n\t// Only attach one dispatcher per `event`.\n\tif (listeners.length === 1) {\n\t\twindow.addEventListener('message', dispatcher, false);\n\t}\n\n\treturn that;\n};\n\n/**\n * - If a `listener` is not provided, then unregister all listeners from a `PostIt` instance (`id`), for a given `event`.\n * - If a `listener` is provided, then unregister a `listener` from a `PostIt` instance (`id`), for a given `event`.\n * @param {string} event\n * @param {function=} listener\n * @returns {object}\n * @public\n */\n\nPostIt.prototype.off = function(event, listener) {\n\tvar that = this;\n\tvar listeners = that.listeners[event] || [];\n\n\tfor (var i = 0; i < listeners.length; ++i) {\n\t\tif (!listener || listener.guid === listeners[i].guid) {\n\t\t\tlisteners.splice(i--, 1);\n\t\t}\n\t}\n\n\tif (!listeners.length) {\n\t\twindow.removeEventListener('message', listeners.dispatcher, false);\n\n\t\tdelete that.listeners[event];\n\t}\n\n\treturn that;\n};\n\n/**\n * - If `event` is an asterisk (\\*), then emit an `event` to all listeners registered to a `PostIt` instance (`id`), for all given `event`s.\n * - If `event` is not an asterisk (\\*), then emit an `event` to all listeners registered to a `PostIt` instance (`id`), for a given `event`.\n * @param {string} event\n * @param {object} target\n * @param {string|array|object} message\n * @param {string} origin\n * @returns {object}\n * @public\n */\n\nPostIt.prototype.emit = function(event, target, message, origin) {\n\tvar that = this;\n\tvar eventOrigin = window.location.href;\n\tvar symbol = 'postit';\n\n\tswitch (Object.prototype.toString.call(message)) {\n\t\tcase '[object Function]':\n\t\t\tconsole.warn(message + ' should either be an `Object`, `Array` or `String`.');\n\n\t\t\treturn that;\n\n\t\tcase '[object Object]':\n\t\t\tmessage.__postit = symbol;\n\t\t\tmessage.__id = that.id;\n\t\t\tmessage.__event = event;\n\t\t\tmessage.__origin = eventOrigin;\n\t\t\tmessage = JSON.stringify(message);\n\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmessage = JSON.stringify({\n\t\t\t\t__postit: symbol,\n\t\t\t\t__value: message,\n\t\t\t\t__id: that.id,\n\t\t\t\t__event: event,\n\t\t\t\t__origin: eventOrigin\n\t\t\t});\n\t}\n\n\ttarget.postMessage(message, origin);\n\n\treturn that;\n};\n"],"sourceRoot":"/source/"}